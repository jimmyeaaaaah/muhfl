# 解けない理由

* foldr_ho
変数のreuseがあるため。
x = x2 がわかれば解ける。同一の変数から生じるものなので、同一であるはず。？ => 非決定性があるため、同一とは言い切れないはず。
非決定性が無いことがわかれば統一できる？

* koskinen-3-1_ho
不動点の中を見る必要がある
callbackの中で無駄な最大不動点の呼び出し
変数のreuse

* map_ho
変数のreuseがあるため

* toChurch_ho
変数のreuseがあるため

* up_down_ho
変数のreuseがあるため

* x_plus_2_n_ho
変数のreuseがあるため

* loop2_ho
やはり共有はある。
変形しても解けない？
スコープの問題で、中の値の取り出しを外側にする必要がある場合がありそう

* koskinen-2_ho
coe=2,2が必要
述語の結果をもう一度述語に渡しているので難しいと思われる

## checkに再帰があるもの。
koskinen-1_ho
murase_closure_ho
再帰を作る目的はboundsで追加引数が必要にするため。しかし、これらは、なくても問題が無いはず


ackermannがdualで解けないのは条件式の違い。意味的には同じ。最適化の問題

_hoの中で共有しなくても解けるものと共有すると解けないものがある。違いは不明
