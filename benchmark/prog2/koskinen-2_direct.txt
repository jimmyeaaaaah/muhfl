/*
  * result: valid
  * time: < 1.0 sec
  * retrieved from: Koskinen and Terauchi, "Local Temporal Reasoning", CSL-LICS 2014, Figure 10
  * remark: systematically converted into a non-terminating program. 
*/
%PROGRAM
let loop = event called; loop

let print_int x =
  event called;
  event print;
  loop

let rumble x y k =
  event called;
  event rumble;
  if x < y then (
    if <d> * then
      rumble (x+1) y k
    else rumble x (y-1) k
  ) else k x

let () =
  let a = <_forall> * in
  let b = <_forall> * in
  rumble b a (\r.
    rumble a r (\r2.
      print_int r2
    )
  )

/* 
(G((rumble && NOT print && NOT called) || (NOT rumble && print && NOT called) || (NOT rumble && NOT print && called))) && F(print) */
%TRANSITION
q0 rumble -> (1, q0).
q0 called -> (1, q0).
q0 print -> (1, q1).
q0 d -> (1, q0) /\ (2, q0).

q1 rumble -> (1, q1).
q1 called -> (1, q1).
q1 print -> (1, q1).
q1 d -> (1, q1) /\ (2, q1).


%PRIORITY
q0 -> 1.
q1 -> 2.
