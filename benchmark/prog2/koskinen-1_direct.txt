/*
  * result: valid
  * time: 1.3 sec
  * retrieved from: Koskinen and Terauchi, "Local Temporal Reasoning", CSL-LICS 2014, Figure 10
  * remark: systematically converted into a non-terminating program. 
*/
/* If there is an infinite loop without events, an automaton accepts, because the event sequence is finite. To prevent it, insert the event "called" at the beginning of the body of every functions */
/* LTLで表現する際は、「各時刻でちょうど1つの命題変数が真になることが常に成り立つ」という条件が必要 */

%PROGRAM
let loop = event called; loop

let done =
  event called;
  event done;
  loop
  
let reduce x r k =
  event called;
  if x<=0 then k x else r x k

let explore x r =
  event called;
  event explore;
  reduce x r (\y.
    if y<=0 then done
    else explore y r
  )

let () =
  let t = <_forall> * in
  explore t (\x k. k (x - 2))

/* (G((called && NOT done && NOT explore) || (NOT called && done && NOT explore) || (NOT called && NOT done && explore))) && F(done) */
%TRANSITION
q0 called -> (1, q0).
q0 explore -> (1, q0).
q0 done -> (1, q1).

q1 called -> (1, q1).
q1 explore -> (1, q1).
q1 done -> (1, q1).

%PRIORITY
q0 -> 1.
q1 -> 2.
