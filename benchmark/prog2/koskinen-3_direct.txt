/*
  * result: valid
  * time: 16.4 sec
  * retrieved from: Koskinen and Terauchi, "Local Temporal Reasoning", CSL-LICS 2014, Figure 10
  * remark: systematically converted into a non-terminating program. In the "Temporal Verification of Higher-Order Functional Programs" paper, a program with "if x>0 then bar (x-1) k" is used but the result is same as the original program.
*/

%PROGRAM
let halt =
  event called;
  event halt;
  halt
  
let bar x k =
  event called;
  event bar;
  if x>0 then bar (x-2) k
  else k x

let foo x =
  event called;
  event foo;
  if x<=0 then foo x
  else halt

let () =
  if <d> * then foo 0
  else bar (<_forall> *) (\r.
    foo r
  )

/* (G((foo && NOT bar && NOT halt && NOT called) || (NOT foo && bar && NOT halt && NOT called) || (NOT foo && NOT bar && halt && NOT called) || (NOT foo && NOT bar && NOT halt && called))) && FG(foo || step) */
/* FG(phi) なので、F(phi) とは異なり、parity がevenのstateからphiを満たさないイベントが生成されたときにdead-stateに遷移する */
%TRANSITION
q0 halt -> (1, q0).
q0 foo -> (1, q0) \/ (1, q1).
q0 bar -> (1, q0).
q0 called -> (1, q0) \/ (1, q1).
q0 d -> (1, q0) /\ (2, q0).

q1 foo -> (1, q1).
q1 bar -> (1, qd).
q1 halt -> (1, qd).
q1 called -> (1, q1).
q1 d -> (1, q1) /\ (2, q1).

qd foo -> (1, qd).
qd bar -> (1, qd).
qd halt -> (1, qd).
qd called -> (1, qd).
qd d -> (1, qd) /\ (2, qd).

%PRIORITY
q0 -> 1.
q1 -> 2.
qd -> 1.
