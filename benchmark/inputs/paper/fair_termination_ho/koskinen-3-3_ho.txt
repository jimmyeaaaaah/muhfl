/* invalid */
%PROGRAM
let halt =
  event called;
  /* event halt; */
  halt
  
let bar x_ k =
  event called;
  event bar;
  check1 x_ (\b.
    if b = 1 then bar (pred x_) k else k x_
  )

let check1 x_ k =
  x_ (\x.
    if x>0 then k 1 else k 0
  )

let pred x_ k =
  x_ (\x.
    k (x - 1)
  )

let foo x_ =
  event called;
  /* event foo; */
  check2 x_ (\b.
    if b = 1 then foo x_ else halt
  )

let check2 x_ k =
  x_ (\x.
    if x<=0 then k 1 else k 0
  )

let xx flag x_ =
  if flag = 1 then (
    if <d> * then foo (\k. k 0)
    else bar x_ (\r_.
      foo r_
    )
  ) else
    xx 1 x_
  
let () =
  let x = <_exists> * in
  xx 0 (\k. k x)

%TRANSITION
q_0 called -> (1, q_0).
q_bar called -> (1, q_0).

q_0 d -> (1, q_0) \/ (2, q_0).
q_bar d -> (1, q_0) \/ (2, q_0).

q_0 bar -> (1, q_bar).
q_bar bar -> (1, q_bar).

%PRIORITY
/* {(always, bar)} */
q_bar -> 2.
q_0 -> 1.
