/* invalid */
%PROGRAM
let f x_ k =
  event called;
  check x_ (\b.
    if b = 1 then k
    else if b = 2 then (event a; k)
    else (f (\k2. k2 0) (\. f (\k2. k2 1) k))
  )

let check x_ k =
  event called;
  x_ (\x.
    if x < 0 then k 1
    else if x = 0 then k 2
    else k 3
  )

let xx flag x_ k =
  event called;
  if flag = 1 then
    f x_ k
  else
    xx 1 x_ k

let () =
  let x = <_exists> * in
  xx 0 (\k. k x) (\. ())

%TRANSITION
q_0 called -> (1, q_0).
q_a called -> (1, q_0).

q_0 d -> (1, q_0) \/ (2, q_0).
q_a d -> (1, q_0) \/ (2, q_0).

q_0 a -> (1, q_a).
q_a a -> (1, q_a).

q_0 nullary -> false.
q_a nullary -> false.

%PRIORITY
/* {(a, never)} */
q_0 -> 0.
q_a -> 1.
