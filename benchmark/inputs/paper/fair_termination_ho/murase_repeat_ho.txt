/* invalid */
%PROGRAM
let xx flag g fx k =
  event called;
  if flag = 1 then
    g fx k
  else
    xx 1 g fx k

let check fx k =
  event called;
  fx (\x.
    if x > 0 then k 1 else k 0
  )

let pred fx k =
  event called;
  fx (\x.
    k (x - 1)
  )

let repeat g k =
  event called;
  let v = <_exists> * in
  xx 0 g (\k. k v) (\.
    repeat g k
  )

let f fx k =
  event called;
  check fx (\b.
    if b = 1 then
      f (pred fx) k
    else
      (event a; k)
  )

let () =
  repeat f (\. ())


%TRANSITION
q_0 called -> (1, q_0).
q_a called -> (1, q_0).

q_0 a -> (1, q_a).
q_a a -> (1, q_a).

q_0 nullary -> false.
q_a nullary -> false.

%PRIORITY
/* {(a, never)} */
q_0 -> 0.
q_a -> 1.
