/* should be invalid */
%PROGRAM
let app f x_ i kk =
  event called;
  event p;
  f x_ (\x2_ k2. x2_ (\x2. k2 (\k3. k3 (x2 - i)))) kk

let ha1 x =
  event called;
  event p;
  event ha;
  ha1 x

let ha2 x =
  event called;
  event p;
  event ha;
  ha2 x

let walk x_ f k =
  event called;
  event p;
  check x_ (\b.
    if b = 1 then k x_
    else f x_ (\x2. walk x2 f k)
  )

let run x_ f k =
  event called;
  event p;
  check x_ (\b.
    if b = 1 then k x_
    else f x_ (\x2. f x2 (\x3. run x3 f k))
  )

let life x_ =
  event called;
  if <d2> * then (
    event p;
    check x_ (\b.
      if b = 1 then app walk x_ 1 (\x__. ha1 x__)
      else app run x_ 1 (\x__. ha2 x__)
    )
  ) else life x_

let check x_ k =
  x_ (\x.
    if x < 0 then k 1 else k 0
  )

let xx flag x_ =
  if flag = 1 then
    life x_
  else
    xx 1 x_
  
let () =
  let x = <_exists> * in
  xx 0 (\k. k x)


%TRANSITION
q_0 called -> (1, q_0).
q_p called -> (1, q_0).
q_ha called -> (1, q_0).

q_0 d2 -> (1, q_0) \/ (2, q_0).
q_p d2 -> (1, q_0) \/ (2, q_0).
q_ha d2 -> (1, q_0) \/ (2, q_0).

q_0 p -> (1, q_p).
q_p p -> (1, q_p).
q_ha p -> (1, q_p).

q_0 ha -> (1, q_ha).
q_p ha -> (1, q_ha).
q_ha ha -> (1, q_ha).

%PRIORITY
/* {(always, p); (ha, never)}  =  ha is finite && p is infinite */
q_0 -> 1.
q_p -> 2.
q_ha -> 3.


/*
/* valid in 1 sec with z3   need extra arguments unless inlining for arguments */
%HES
Sentry =v
  ∀x. 
    (x >= 0 \/
      (∀sssss. 
        sssss < 1 * x + 1 \/ sssss < (-1) * x + 1 \/ sssss < 1 * 1 + 1
        \/ sssss < (-1) * 1 + 1
        \/ sssss < 1
        \/ Walk__q_p sssss (\k__q_p. k__q_p x) App122__q_p true)
    )
    /\ 
    (x < 0 \/
      (∀sssss. 
          sssss < 1 * x + 1 \/ sssss < (-1) * x + 1
          \/ sssss < 1 * 1 + 1
          \/ sssss < (-1) * 1 + 1
          \/ sssss < 1
             /* App122__q_p is inlined */
          \/ Run__q_p sssss (\k__q_p. k__q_p x) true)
    )
    .
  
App122__q_p x2___q_p k2__q_p =v
  x2___q_p
   (\x. k2__q_p (\k3__q_p. k3__q_p (x - 1))).

Walk__q_p ttttt x___q_p f__q_p k__q_p =v
  ∀sssss. 
   sssss < 1 * ttttt + 1 \/ sssss < (-1) * ttttt + 1 \/ sssss < 1
   \/ Check__q_p x___q_p
       (\x. 
         ∀recWalk125__q_p. 
          recWalk125__q_p < 1 + 1 * ttttt \/ recWalk125__q_p < 1 + (-1) * ttttt
          \/ recWalk125__q_p < 1 + 1 * x
          \/ recWalk125__q_p < 1 + (-1) * x
          \/ recWalk125__q_p < 1
          \/ Walk125__q_p recWalk125__q_p k__q_p x___q_p f__q_p x).

Walk125__q_p recWalk125__q_p k__q_p x___q_p f__q_p b =v
  recWalk125__q_p > 0
  /\ (b != 1 \/ k__q_p)
  /\ (b = 1
      \/ f__q_p x___q_p
          (\x2__q_p. 
            Check__q_p x2__q_p
              (Walk125__q_p (recWalk125__q_p - 1) k__q_p x2__q_p f__q_p))).

Run__q_p ttttt x___q_p k__q_p =v
  ∀sssss. 
   sssss < 1 * ttttt + 1 \/ sssss < (-1) * ttttt + 1 \/ sssss < 1
   \/ Check__q_p x___q_p
       (\x. 
         ∀recRun127__q_p. 
          recRun127__q_p < 1 + 1 * ttttt \/ recRun127__q_p < 1 + (-1) * ttttt
          \/ recRun127__q_p < 1 + 1 * x
          \/ recRun127__q_p < 1 + (-1) * x
          \/ recRun127__q_p < 1
          \/ Run127__q_p recRun127__q_p k__q_p x___q_p x).

Run127__q_p recRun127__q_p k__q_p x___q_p b =v
  recRun127__q_p > 0
  /\ (b != 1 \/ k__q_p)
  /\ (b = 1
      \/ App122__q_p x___q_p
          (\x2__q_p. 
            App122__q_p x2__q_p
              (\x3__q_p. 
                Check__q_p x3__q_p
                  (Run127__q_p (recRun127__q_p - 1) k__q_p x3__q_p)))).

Check__q_p x___q_p k__q_p =v x___q_p (\x. (x >= 0 \/ k__q_p 1) /\ (x < 0 \/ k__q_p 0)).

*/

