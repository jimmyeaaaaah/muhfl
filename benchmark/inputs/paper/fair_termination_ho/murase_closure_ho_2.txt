/* invalid */
%PROGRAM
let const x k = event called; k x

let finish k = event called; event a; finish k

let f g k =
  event called;
  g (\fn.
    check fn (\b.
      if b = 1 then
        f (const (pred fn)) k
      else finish k
    )
  )

let xx flag g k =
  event called;
  if flag = 1 then
    f g k
  else
    xx 1 g k

let check fx k =
  event called;
  fx (\x.
    if x > 0 then k 1 else k 0
  )

let pred fx k =
  event called;
  fx (\x.
    k (x - 1)
  )

let () =
  let n = <_exists> * in
  xx 0 (const (\k. k n)) (\. ())

%TRANSITION
q_0 called -> (1, q_0).
q_a called -> (1, q_0).

q_0 a -> (1, q_a).
q_a a -> (1, q_a).

q_0 nullary -> false.
q_a nullary -> false.

%PRIORITY
/* {(a, never)} */
q_0 -> 0.
q_a -> 1.
